name: Run E2E Automation

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      service:
        required: true
        type: string

permissions:
  contents: read
  packages: read
  deployments: read

jobs:
  e2e:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository_owner }}/playwright-test:latest
      env:
        CI: "true"
        TZ: Asia/Bangkok
    strategy:
      fail-fast: false
      matrix:
        project: ["Chromium Desktop", "Safari Mobile"]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Resolve inputs
        id: cfg
        run: |
          echo "env=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          echo "base=${{ inputs.service }}" >> $GITHUB_OUTPUT

      - name: Pick grep tag by service
        id: pick
        shell: bash
        run: |
          service="${{ steps.cfg.outputs.base }}"
          if [[ "$service" == *"community-member"* ]]; then
            echo "grep=@cm" >> $GITHUB_OUTPUT
          else
            echo "grep=@earnin" >> $GITHUB_OUTPUT
          fi
          echo "SERVICE  : $service"
          echo "GREP : $(sed -n 's/grep=\(.*\)/\1/p' $GITHUB_OUTPUT)"

      - name: Wait target ready
        continue-on-error: true
        shell: bash
        run: |
          svc='${{ steps.cfg.outputs.svc }}'
          case "$svc" in
            community-member|cm) url='https://v0-cmlookup2.vercel.app/' ;;
            earnin|ei)           url='https://www.earnin.com/financial-calculators' ;;
            *) echo "Unknown service: $svc"; exit 1 ;;
          esac
          echo "Waiting on: $url"
          npx wait-on --timeout=240000 "$url" || true

      - name: Run Playwright (${{ matrix.project }})
        env:
          SERVICE: ${{ steps.cfg.outputs.base }}
        run: |
          npx playwright test \
            --grep "${{ steps.pick.outputs.grep }}" \
            --project="${{ matrix.project }}" \
            --reporter=line,html,junit

      - name: Upload HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.project }}
          path: playwright-report
          retention-days: 7

      - name: Upload traces/screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.project }}
          path: |
            test-results/**
            playwright-report/**
          retention-days: 7
